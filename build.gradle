plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'com.projectmatching'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.21'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'


    implementation 'com.querydsl:querydsl-jpa:4.4.0'
    implementation 'com.querydsl:querydsl-apt:4.4.0'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
    testImplementation 'org.mockito:mockito-inline:3.6.0'



}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        excludes=["**/Q*.class"]
     }

}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        html.required = true
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/*",
                    "**/Q*.class"
            ])
        }))
}

}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.2
            }
            excludes=['**/config/*','**/Q*.class']

        }

        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                minimum = 0.3
            }

        }
    }
}


jacoco {
    toolVersion = "0.8.8"
}





task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}